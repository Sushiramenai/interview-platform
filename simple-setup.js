#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

console.log(`
╔═══════════════════════════════════════════════════════════╗
║           🤖 AI Interview Platform Setup                   ║
║                                                           ║
║   The simplest way to conduct AI-powered interviews      ║
╚═══════════════════════════════════════════════════════════╝
`);

async function setup() {
    try {
        console.log('This setup will help you get started in just 2 minutes!\n');
        
        // Step 1: Check dependencies
        console.log('📦 Step 1: Checking dependencies...');
        try {
            require.resolve('socket.io');
            console.log('✅ Socket.io is installed');
        } catch (e) {
            console.log('Installing Socket.io...');
            execSync('npm install socket.io', { stdio: 'inherit' });
        }
        
        try {
            require.resolve('@anthropic-ai/sdk');
            console.log('✅ Claude SDK is installed');
        } catch (e) {
            console.log('Installing Claude SDK...');
            execSync('npm install @anthropic-ai/sdk', { stdio: 'inherit' });
        }
        
        // Step 2: Create directories
        console.log('\n📁 Step 2: Creating directories...');
        await fs.mkdir(path.join(__dirname, 'views'), { recursive: true });
        await fs.mkdir(path.join(__dirname, 'public/js'), { recursive: true });
        await fs.mkdir(path.join(__dirname, 'public/css'), { recursive: true });
        await fs.mkdir(path.join(__dirname, 'data/recordings'), { recursive: true });
        await fs.mkdir(path.join(__dirname, 'data/results'), { recursive: true });
        console.log('✅ Directories created');
        
        // Step 3: Create .env file
        console.log('\n🔑 Step 3: Setting up API keys...\n');
        
        console.log('You need 2 API keys to run this platform:\n');
        console.log('1. Claude API Key (Required)');
        console.log('   Get yours at: https://console.anthropic.com/');
        console.log('   Price: ~$0.25 per interview\n');
        
        const claudeKey = await question('Enter your Claude API key: ');
        
        console.log('\n2. ElevenLabs API Key (Optional but recommended)');
        console.log('   Get yours at: https://elevenlabs.io/');
        console.log('   Price: Free tier includes 10,000 characters/month\n');
        
        const elevenLabsKey = await question('Enter your ElevenLabs API key (or press Enter to skip): ');
        
        // Create .env file
        let envContent = `# AI Interview Platform Configuration
# Generated by setup script

# Claude API Key (Required)
CLAUDE_API_KEY=${claudeKey.trim()}

# ElevenLabs API Key (Optional - for voice)
ELEVENLABS_API_KEY=${elevenLabsKey.trim()}

# Port (default: 3000)
PORT=3000
`;
        
        await fs.writeFile(path.join(__dirname, '.env'), envContent);
        console.log('\n✅ Configuration saved to .env file');
        
        // Step 4: Create package.json scripts if needed
        console.log('\n📝 Step 4: Updating package.json...');
        const packagePath = path.join(__dirname, 'package.json');
        let packageJson = {};
        
        try {
            const content = await fs.readFile(packagePath, 'utf8');
            packageJson = JSON.parse(content);
        } catch (e) {
            // Create minimal package.json
            packageJson = {
                name: "ai-interview-platform",
                version: "1.0.0",
                description: "Simple AI-powered interview platform",
                main: "simplified-server.js"
            };
        }
        
        // Ensure scripts exist
        if (!packageJson.scripts) {
            packageJson.scripts = {};
        }
        
        packageJson.scripts.start = "node simplified-server.js";
        packageJson.scripts.dev = "node simplified-server.js";
        
        await fs.writeFile(packagePath, JSON.stringify(packageJson, null, 2));
        console.log('✅ Package.json updated');
        
        // Step 5: Final instructions
        console.log(`
╔═══════════════════════════════════════════════════════════╗
║                  ✅ Setup Complete!                        ║
╚═══════════════════════════════════════════════════════════╝

🚀 To start the platform:

   npm start

📱 Then open your browser to:

   http://localhost:3000

🎯 Quick Start Guide:

   1. Click "Create New Interview"
   2. Enter candidate details
   3. Copy the interview link
   4. Send to candidate
   5. View results when complete

💡 Features:

   ✓ AI conducts the entire interview
   ${elevenLabsKey ? '✓ Natural voice synthesis' : '✗ Voice disabled (no ElevenLabs key)'}
   ✓ Automatic recording
   ✓ Intelligent evaluation
   ✓ Simple HR dashboard

📧 Need help? Check the README or open an issue on GitHub.

Happy interviewing! 🎉
`);
        
    } catch (error) {
        console.error('\n❌ Setup failed:', error.message);
        console.log('\nPlease check the error and try again.');
    } finally {
        rl.close();
    }
}

// Run setup
setup();